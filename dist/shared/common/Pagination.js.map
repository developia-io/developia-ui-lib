{"version":3,"sources":["../../../components/shared/common/Pagination.tsx","../../../react.import.js","../../../hooks/usePagination.ts","../../../components/shared/common/buttons/IconButton.tsx","../../../components/icons.tsx"],"sourcesContent":["import { useCallback } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport { DOTS, usePagination } from \"@/hooks/usePagination\";\r\nimport Button from \"@/components/shared/common/buttons/Button\";\r\nimport IconButton from \"@/components/shared/common/buttons/IconButton\";\r\nimport { IconAngleLeft, IconAngleRight } from \"@/components/icons\";\r\n\r\ntype PaginationChangePage = (page: number, totalRows: number) => void;\r\n\r\ntype Props = {\r\n  rowsPerPage: number;\r\n  className?: string;\r\n  rowCount: number;\r\n  currentPage: number;\r\n  onChangePage: PaginationChangePage;\r\n};\r\n\r\nexport type PaginationComponentProps = Props;\r\n\r\nconst Pagination = (props: Props) => {\r\n  const { rowCount, onChangePage, className, currentPage } = props;\r\n\r\n  const paginationRange = usePagination(props);\r\n\r\n  const handlePrevious = useCallback(\r\n    () => onChangePage(Number(currentPage) - 1, rowCount),\r\n    [currentPage, onChangePage, rowCount]\r\n  );\r\n\r\n  const handleNext = useCallback(\r\n    () => onChangePage(Number(currentPage) + 1, rowCount),\r\n    [currentPage, onChangePage, rowCount]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={twMerge(\r\n        \"flex items-center gap-4 justify-center pb-6 lg:mb-0\",\r\n        className\r\n      )}\r\n    >\r\n      <IconButton\r\n        variant=\"outline\"\r\n        disabled={currentPage === 1}\r\n        className=\"text-blue800 p-0\"\r\n        onClick={handlePrevious}\r\n      >\r\n        <IconAngleLeft width={18} height={18} />\r\n      </IconButton>\r\n\r\n      {paginationRange.map((item, index) =>\r\n        item === DOTS ? (\r\n          <span key={index} className=\"font-semibold text-blue800\">\r\n            {DOTS}\r\n          </span>\r\n        ) : (\r\n          <button\r\n            key={index}\r\n            onClick={() => onChangePage(Number(item), rowCount)}\r\n            className={clsx(\r\n              \"rounded-2xl w-8 h-8 font-semibold text-blue800 hover:bg-blue800 hover:text-white\",\r\n              {\r\n                \"bg-blue800 text-white\": currentPage === item,\r\n              }\r\n            )}\r\n          >\r\n            {item}\r\n          </button>\r\n        )\r\n      )}\r\n\r\n      <IconButton\r\n        variant=\"outline\"\r\n        disabled={currentPage === rowCount}\r\n        className=\"text-blue800 p-0\"\r\n        onClick={handleNext}\r\n      >\r\n        <IconAngleRight width={18} height={18} />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\nexport default Pagination;\r\n","import React from 'react'\n\nexport { React }","import { useMemo } from \"react\";\r\nimport { PaginationComponentProps } from \"@/components/shared/common/Pagination\";\r\n\r\nexport const DOTS = \"...\";\r\n\r\nconst range = (start: number, end: number) => {\r\n  const length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const usePagination = ({\r\n  rowsPerPage,\r\n  rowCount,\r\n  currentPage,\r\n}: PaginationComponentProps) => {\r\n  const siblingCount = 1;\r\n\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(rowCount / rowsPerPage);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n      Case 1:\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    /*\r\n    \tCalculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n    */\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    /*\r\n      We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n    */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    /*\r\n    \tCase 2: No left dots to show, but rights dots to be shown\r\n    */\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      const leftItemCount = 3 + 2 * siblingCount;\r\n      const leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    /*\r\n    \tCase 3: No right dots to show, but left dots to be shown\r\n    */\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      const rightItemCount = 3 + 2 * siblingCount;\r\n      const rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    /*\r\n    \tCase 4: Both left and right dots to be shown\r\n    */\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      const middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [rowCount, rowsPerPage, siblingCount, currentPage]);\r\n\r\n  return paginationRange ?? [];\r\n};\r\n","import clsx from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  as?: React.ElementType;\r\n  color?: \"primary\" | \"secondary\" | \"transparent\";\r\n  variant?: \"flat\" | \"shadow\" | \"outline\" | \"outline-secondary\";\r\n  rounded?: boolean;\r\n};\r\n\r\nconst IconButton = ({\r\n  as: Cmp = \"button\",\r\n  children,\r\n  color = \"primary\",\r\n  variant = \"flat\",\r\n  rounded,\r\n  className,\r\n  ...rest\r\n}: Props) => {\r\n  return (\r\n    <Cmp\r\n      {...rest}\r\n      className={twMerge(\r\n        clsx(\"leading-none flex items-center justify-center w-min h-min p-4 \", {\r\n          \"rounded-full\": rounded,\r\n          rounded: !rounded,\r\n          \"bg-button-primary fill-button-fill-primary\": color === \"primary\",\r\n          \"bg-button-secondary fill-button-fill-secondary\":\r\n            color === \"secondary\",\r\n          \"bg-transparent fill-button-fill-primary\": color === \"transparent\",\r\n          \"p-[11px]\": variant === \"flat\",\r\n          \"border border-button-primary fill-button-fill-primary bg-transparent  \":\r\n            variant === \"outline\",\r\n          \"border border-button-secondary fill-button-fill-secondary  bg-transparent\":\r\n            variant === \"outline-secondary\",\r\n          \"shadow-button border border-gray100 p-2.5\": variant === \"shadow\",\r\n        }),\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </Cmp>\r\n  );\r\n};\r\nexport default IconButton;\r\n","export const IconTest = require(\"@/public/vercel.svg\").default;\r\nexport const IconTest2 = require(\"@/public/next.svg\").default;\r\nexport const IconsCheck = require(\"@/public/IconCheck.svg\").default;\r\nexport const IconAngleLeft = require(\"@/public/IconAngleLeft.svg\").default;\r\nexport const IconAngleRight = require(\"@/public/IconAngleRight.svg\").default;\r\n"],"mappings":"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","names":["import_react","import_clsx","import_tailwind_merge","import_react","React","clsx","React","clsx"]}